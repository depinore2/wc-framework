apiVersion: apps/v1
kind: Deployment
metadata:
  name: _REPLACE_ME_-deployment
  labels:
    app: _REPLACE_ME_
spec:
  replicas: 1
  selector:
    matchLabels:
      app: _REPLACE_ME_
  template:
    metadata:
      labels:
        app: _REPLACE_ME_
    spec:
      containers:
      - name: _REPLACE_ME_
        image: docker.io/library/wc__SOLUTION_NAME___REPLACE_ME_:local
        env:
        - name: APP_NAME
          value: _REPLACE_ME_
        imagePullPolicy: Never # Should never pull, because it's going to rely on it being loaded in by automation and kind.
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: _REPLACE_ME_-service
spec:
  selector:
    app: _REPLACE_ME_
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      #nodePort: 30007
---
apiVersion: v1
kind: Service
metadata:
  name: _REPLACE_ME_-debug-service
spec:
  type: NodePort
  selector:
    app: _REPLACE_ME_
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 9229
      targetPort: 9229
      nodePort: _DEBUG_PORT_
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      #nodePort: 30007
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: _REPLACE_ME_-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - http:
      paths:
      - path: /_REPLACE_ME_/?(.*)
        pathType: Prefix
        backend:
          service:
            name: _REPLACE_ME_-service
            port:
              number: 80